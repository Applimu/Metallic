
def Int -> (Int -> Int): gcd := fn Int: n do
	fn Int: m do
	match n <= m
		case true do // n <= m
			match eq n 0
				case true do m
				case false do gcd n (m - n)
			end
		case false do
			gcd m n
	end

def fun Int (fun Int Bool): is_coprime := fn Int: n do
	fn Int: m do
	gcd n m == 1
	
def Int -> (Int -> Bool): is_prime_helper := fn Int: i do
	fn Int: p do
	match p <= (i * i)
		case true do true
		case false do
			match is_coprime i p
				case true do
					is_prime_helper (i + 1) p
				case false do
					false
			end
	end

def fun Int Bool: is_prime :=
	 fn Int: p do is_prime_helper 1 p


eval is_prime 01
eval is_prime 02
eval is_prime 03
eval is_prime 04
eval is_prime 05
eval is_prime 06
eval is_prime 07
eval is_prime 08
eval is_prime 09
eval is_prime 10
eval is_prime 11
eval is_prime 12
eval is_prime 13
eval is_prime 14
eval is_prime 15
eval is_prime 16
eval is_prime 17
